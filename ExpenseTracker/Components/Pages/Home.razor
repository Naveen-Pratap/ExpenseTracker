@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IExpenseService ExpenseService

@implements IDisposable

<PageTitle>Home</PageTitle>

@if (ExpenseService.LoadingExpenses)
{
    <div class="loader"></div>
}
else if (ExpenseService.Expenses.Count == 0)
{
    <div class="no-expenses-message">
        <i class="fas fa-info-circle"></i>
        <p>No expenses found. Click on <b>New Expense</b> to add a new expense.</p>
    </div>
}
else
{
    <ExpenseList expenses="ExpenseService.Expenses" />
}


@code {
    public List<Expense> expenses = new();

    protected override async Task OnInitializedAsync()
    {
        ExpenseService.OnChange += StateHasChanged;
        await ExpenseService.LoadExpensesAsync();
    }

    public void Dispose()
    {
        ExpenseService.OnChange -= StateHasChanged;
    }
    
}