@page "/"
@inject IExpenseService ExpenseService

@implements IDisposable

<PageTitle>Home</PageTitle>

@if (Error)
{
    <h2 class="error-message-simple">@ErrorMessage</h2>
}
else if (ExpenseService.LoadingExpenses)
{
    <div class="loader"></div>
}

else if (ExpenseService.Expenses.Count == 0)
{
    <div class="no-expenses-message">
        <i class="fas fa-info-circle"></i>
        <p>No expenses found. Click on <b>New Expense</b> to add a new expense.</p>
    </div>
}
else
{
    <ExpenseList expenses="ExpenseService.Expenses" />
}


@code {
    public List<Expense> Expenses = new();
    public bool Error = false;
    public string ErrorMessage = "An unknown error occured.";

    protected override async Task OnInitializedAsync()
    {
        ExpenseService.OnChange += StateHasChanged;
        try
        {
            await ExpenseService.LoadExpensesAsync();
        }
        catch (HttpRequestException)
        {
            Error = true;
            ErrorMessage = "We're unable to fetch the data at the moment. Please try again after some time.";
        }
        catch (Exception)
        {
            Error = true;
            ErrorMessage = "An unknown error occured.";

        }

    
    }

    public void Dispose()
    {
        ExpenseService.OnChange -= StateHasChanged;
    }
    
}